diff --git a/MicroBenchmarks/CMakeLists.txt b/MicroBenchmarks/CMakeLists.txt
index 08d3dd44..7170c2f3 100644
--- a/MicroBenchmarks/CMakeLists.txt
+++ b/MicroBenchmarks/CMakeLists.txt
@@ -1,12 +1,12 @@
 file(COPY lit.local.cfg DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
 
-add_subdirectory(Builtins)
-add_subdirectory(libs)
-add_subdirectory(XRay)
-add_subdirectory(LCALS)
-add_subdirectory(harris)
-add_subdirectory(ImageProcessing)
-add_subdirectory(LoopInterchange)
-add_subdirectory(LoopVectorization)
-add_subdirectory(MemFunctions)
-add_subdirectory(SLPVectorization)
+#add_subdirectory(Builtins)
+#add_subdirectory(libs)
+#add_subdirectory(XRay)
+#add_subdirectory(LCALS)
+#add_subdirectory(harris)
+#add_subdirectory(ImageProcessing)
+#add_subdirectory(LoopInterchange)
+#add_subdirectory(LoopVectorization)
+#add_subdirectory(MemFunctions)
+#add_subdirectory(SLPVectorization)
diff --git a/MultiSource/Applications/CMakeLists.txt b/MultiSource/Applications/CMakeLists.txt
index b008394f..8c6bce37 100644
--- a/MultiSource/Applications/CMakeLists.txt
+++ b/MultiSource/Applications/CMakeLists.txt
@@ -14,21 +14,28 @@ add_subdirectory(sgefa)
 add_subdirectory(spiff)
 add_subdirectory(viterbi)
 
-add_subdirectory(ALAC)
-add_subdirectory(hbd)
-add_subdirectory(lambda-0.1.3)
-add_subdirectory(minisat)
+# JLC: GlobalAlias constants are not supported.
+#add_subdirectory(ALAC)
+# JLC: invoke is not supported.
+#add_subdirectory(hbd)
+# C++ benchmark
+#add_subdirectory(lambda-0.1.3)
+# JLC: invoke is not supported.
+#add_subdirectory(minisat)
 if(NOT TARGET_OS STREQUAL "SunOS")
-  add_subdirectory(hexxagon)
+  # C++ benchmark
+  #add_subdirectory(hexxagon)
 endif()
 if(NOT DEFINED SMALL_PROBLEM_SIZE)
   add_subdirectory(lua)
 endif()
 if((TARGET_OS STREQUAL "Linux" OR TARGET_OS STREQUAL "Darwin") AND (NOT ARCH STREQUAL "XCore"))
-  add_subdirectory(obsequi)
+  # JLC produces the wrong result
+  #add_subdirectory(obsequi)
 endif()
 if(NOT TARGET_OS STREQUAL "SunOS")
-  add_subdirectory(kimwitu++)
+# C++ benchmark
+#  add_subdirectory(kimwitu++)
 endif()
 if(NOT TARGET_OS STREQUAL "SunOS")
   add_subdirectory(SPASS)
diff --git a/MultiSource/Applications/ClamAV/CMakeLists.txt b/MultiSource/Applications/ClamAV/CMakeLists.txt
index f08da4c0..8b28b30d 100644
--- a/MultiSource/Applications/ClamAV/CMakeLists.txt
+++ b/MultiSource/Applications/ClamAV/CMakeLists.txt
@@ -182,5 +182,6 @@ endif()
 # (https://github.com/madler/zlib/pull/895)
 # Disable the compiler extension to workaround the build failure until a zlib
 # source update with the fix.
-target_compile_options(clamscan PRIVATE -fno-define-target-os-macros)
+# JLC does not have such a compiler extension, so the workaround is not needed
+#-target_compile_options(clamscan PRIVATE -fno-define-target-os-macros)
 llvm_test_data(clamscan ${INPUT} dbdir)
diff --git a/MultiSource/Applications/JM/CMakeLists.txt b/MultiSource/Applications/JM/CMakeLists.txt
index 2a0be7f2..e89d379c 100644
--- a/MultiSource/Applications/JM/CMakeLists.txt
+++ b/MultiSource/Applications/JM/CMakeLists.txt
@@ -1,2 +1,3 @@
 add_subdirectory(ldecod)
-add_subdirectory(lencod)
+# JLC produces the wrong result
+#add_subdirectory(lencod)
diff --git a/MultiSource/Benchmarks/CMakeLists.txt b/MultiSource/Benchmarks/CMakeLists.txt
index 61d1fd08..5911b1ac 100644
--- a/MultiSource/Benchmarks/CMakeLists.txt
+++ b/MultiSource/Benchmarks/CMakeLists.txt
@@ -22,17 +22,19 @@ add_subdirectory(Rodinia)
 if((NOT "${TARGET_OS}" STREQUAL "Darwin") OR (NOT "${ARCH}" STREQUAL "ARM"))
   add_subdirectory(TSVC)
 endif()
-add_subdirectory(Prolangs-C++)
-add_subdirectory(Bullet)
-add_subdirectory(tramp3d-v4)
+# C++ benchmarks
+#add_subdirectory(Prolangs-C++)
+#add_subdirectory(Bullet)
+#add_subdirectory(tramp3d-v4)
 if(NOT "${ARCH}" STREQUAL "Hexagon")
-  add_subdirectory(DOE-ProxyApps-C++)
+#  add_subdirectory(DOE-ProxyApps-C++)
   add_subdirectory(DOE-ProxyApps-C)
   add_subdirectory(MiBench)
 endif()
 if(NOT "${ARCH}" STREQUAL "XCore")
-  add_subdirectory(7zip)
-  add_subdirectory(PAQ8p)
+  # invoke is not supported.
+  #add_subdirectory(7zip)
+  #add_subdirectory(PAQ8p)
 endif()
 if(NOT DEFINED SMALL_PROBLEM_SIZE)
   add_subdirectory(mafft)
diff --git a/MultiSource/Benchmarks/DOE-ProxyApps-C/CMakeLists.txt b/MultiSource/Benchmarks/DOE-ProxyApps-C/CMakeLists.txt
index 3bbf8de5..5bf8f674 100644
--- a/MultiSource/Benchmarks/DOE-ProxyApps-C/CMakeLists.txt
+++ b/MultiSource/Benchmarks/DOE-ProxyApps-C/CMakeLists.txt
@@ -2,13 +2,15 @@
 # The biggest alignment of CSKY is 4 bytes so that the expected
 # Est. Memory Usage is different with reference output.
 if(NOT ARCH STREQUAL "CSKY")
-  add_subdirectory(XSBench)
-  add_subdirectory(RSBench)
+# JLC produces incorrect result
+#  add_subdirectory(XSBench)
+#  add_subdirectory(RSBench)
 endif()
 add_subdirectory(Pathfinder)
 add_subdirectory(miniAMR)
 add_subdirectory(miniGMG)
-add_subdirectory(SimpleMOC)
+# JLC produces incorrect result
+#add_subdirectory(SimpleMOC)
 if(NOT CMAKE_SYSTEM_NAME MATCHES "AIX")
 add_subdirectory(CoMD)
 endif()
diff --git a/MultiSource/Benchmarks/McCat/CMakeLists.txt b/MultiSource/Benchmarks/McCat/CMakeLists.txt
index e8b48a51..4045cba9 100644
--- a/MultiSource/Benchmarks/McCat/CMakeLists.txt
+++ b/MultiSource/Benchmarks/McCat/CMakeLists.txt
@@ -2,8 +2,9 @@ add_subdirectory(01-qbsort)
 add_subdirectory(03-testtrie)
 add_subdirectory(04-bisect)
 add_subdirectory(05-eks)
-add_subdirectory(08-main)
-add_subdirectory(09-vor)
+# JLC produces incorrect result
+#add_subdirectory(08-main)
+#add_subdirectory(09-vor)
 add_subdirectory(12-IOtest)
 add_subdirectory(17-bintr)
 add_subdirectory(18-imp)
diff --git a/MultiSource/Benchmarks/MiBench/CMakeLists.txt b/MultiSource/Benchmarks/MiBench/CMakeLists.txt
index e3062a5e..6c44355f 100644
--- a/MultiSource/Benchmarks/MiBench/CMakeLists.txt
+++ b/MultiSource/Benchmarks/MiBench/CMakeLists.txt
@@ -2,7 +2,8 @@ add_subdirectory(automotive-basicmath)
 add_subdirectory(automotive-bitcount)
 add_subdirectory(automotive-susan)
 add_subdirectory(consumer-jpeg)
-add_subdirectory(consumer-typeset)
+# JLC produces the wrong result
+#add_subdirectory(consumer-typeset)
 add_subdirectory(network-dijkstra)
 add_subdirectory(network-patricia)
 add_subdirectory(security-rijndael)
diff --git a/MultiSource/Benchmarks/Olden/CMakeLists.txt b/MultiSource/Benchmarks/Olden/CMakeLists.txt
index 0f2dc911..85568da7 100644
--- a/MultiSource/Benchmarks/Olden/CMakeLists.txt
+++ b/MultiSource/Benchmarks/Olden/CMakeLists.txt
@@ -1,4 +1,5 @@
-add_subdirectory(bh)
+# JLC produces incorrect FP result
+#add_subdirectory(bh)
 add_subdirectory(bisort)
 add_subdirectory(em3d)
 add_subdirectory(health)
@@ -7,4 +8,5 @@ add_subdirectory(perimeter)
 add_subdirectory(power)
 add_subdirectory(treeadd)
 add_subdirectory(tsp)
-add_subdirectory(voronoi)
+# JLC produces incorrect FP result
+#add_subdirectory(voronoi)
diff --git a/MultiSource/Benchmarks/VersaBench/CMakeLists.txt b/MultiSource/Benchmarks/VersaBench/CMakeLists.txt
index 4e503005..aea63800 100644
--- a/MultiSource/Benchmarks/VersaBench/CMakeLists.txt
+++ b/MultiSource/Benchmarks/VersaBench/CMakeLists.txt
@@ -1,6 +1,7 @@
 add_subdirectory(beamformer)
 add_subdirectory(bmm)
-add_subdirectory(dbms)
+# JLC produces incorrect FP result
+#add_subdirectory(dbms)
 add_subdirectory(ecbdes)
 if(NOT "${ENDIAN}" STREQUAL "big")
   add_subdirectory(8b10b)
diff --git a/MultiSource/Benchmarks/mediabench/CMakeLists.txt b/MultiSource/Benchmarks/mediabench/CMakeLists.txt
index b375382d..4b0b2bc8 100644
--- a/MultiSource/Benchmarks/mediabench/CMakeLists.txt
+++ b/MultiSource/Benchmarks/mediabench/CMakeLists.txt
@@ -2,4 +2,5 @@ add_subdirectory(adpcm)
 add_subdirectory(g721)
 add_subdirectory(gsm)
 add_subdirectory(jpeg)
-add_subdirectory(mpeg2)
+# JLC produces incorrect FP result
+#add_subdirectory(mpeg2)
diff --git a/MultiSource/UnitTests/CMakeLists.txt b/MultiSource/UnitTests/CMakeLists.txt
index 273e48f3..2db76b58 100644
--- a/MultiSource/UnitTests/CMakeLists.txt
+++ b/MultiSource/UnitTests/CMakeLists.txt
@@ -1,4 +1,4 @@
-add_subdirectory(C++11)
+#add_subdirectory(C++11)
 if(ARCH STREQUAL "Mips")
   add_subdirectory(Mips)
 endif()
diff --git a/MultiSource/UnitTests/Float/rounding/CMakeLists.txt b/MultiSource/UnitTests/Float/rounding/CMakeLists.txt
index ec9825f3..edeca79a 100644
--- a/MultiSource/UnitTests/Float/rounding/CMakeLists.txt
+++ b/MultiSource/UnitTests/Float/rounding/CMakeLists.txt
@@ -1 +1,2 @@
-llvm_multisource(rounding)
+#/home/magnus/git/test/llvm-test-suite/llvm-test-suite.git/MultiSource/UnitTests/Float/rounding/rounding.c:155:3: error: use of unknown builtin '__builtin_set_flt_rounds' [-Wimplicit-function-declaration]
+# llvm_multisource(rounding)
diff --git a/SingleSource/Benchmarks/CMakeLists.txt b/SingleSource/Benchmarks/CMakeLists.txt
index 72ce8b06..7cb10039 100644
--- a/SingleSource/Benchmarks/CMakeLists.txt
+++ b/SingleSource/Benchmarks/CMakeLists.txt
@@ -1,14 +1,17 @@
-add_subdirectory(Adobe-C++)
+#add_subdirectory(Adobe-C++)
 add_subdirectory(BenchmarkGame)
-add_subdirectory(CoyoteBench)
-add_subdirectory(Dhrystone)
+# invoke is not supported.
+#add_subdirectory(CoyoteBench)
+# JLC generated executable never finishes
+#add_subdirectory(Dhrystone)
 add_subdirectory(Linpack)
 add_subdirectory(McGill)
 add_subdirectory(Misc)
-add_subdirectory(Misc-C++)
-add_subdirectory(Misc-C++-EH)
+#add_subdirectory(Misc-C++)
+#add_subdirectory(Misc-C++-EH)
 add_subdirectory(Polybench)
 add_subdirectory(Shootout)
-add_subdirectory(Shootout-C++)
-add_subdirectory(SmallPT)
+#add_subdirectory(Shootout-C++)
+# C++ benchmark
+#add_subdirectory(SmallPT)
 add_subdirectory(Stanford)
diff --git a/SingleSource/Benchmarks/Misc/CMakeLists.txt b/SingleSource/Benchmarks/Misc/CMakeLists.txt
index 533d1a4e..f05f3c60 100644
--- a/SingleSource/Benchmarks/Misc/CMakeLists.txt
+++ b/SingleSource/Benchmarks/Misc/CMakeLists.txt
@@ -3,7 +3,8 @@ list(APPEND CFLAGS -Wno-implicit-int)
 set(FP_TOLERANCE 0.001)
 set(Source
   ReedSolomon.c
-  evalloop.c
+  # Blockaddress constants are not supported.
+  #evalloop.c
   fbench.c
   ffbench.c
   flops-1.c
diff --git a/SingleSource/Regression/C/CMakeLists.txt b/SingleSource/Regression/C/CMakeLists.txt
index 3f224e27..08f773f5 100644
--- a/SingleSource/Regression/C/CMakeLists.txt
+++ b/SingleSource/Regression/C/CMakeLists.txt
@@ -5,6 +5,11 @@ if(ARCH MATCHES "x86" OR ARCH MATCHES "riscv" OR
   add_subdirectory(gcc-c-torture)
 endif()
 
+# Remove tests that doesn't work with JLC
+file(GLOB Source RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.c)
+# Blockaddress constants are not supported.
+list(REMOVE_ITEM Source 2004-03-15-IndirectGoto.c)
+
 list(APPEND LDFLAGS -lm)
 list(APPEND CFLAGS -Wno-implicit-int)
 llvm_singlesource(PREFIX "Regression-C-")
diff --git a/SingleSource/Regression/C/gcc-c-torture/execute/CMakeLists.txt b/SingleSource/Regression/C/gcc-c-torture/execute/CMakeLists.txt
index 03425811..993e27af 100644
--- a/SingleSource/Regression/C/gcc-c-torture/execute/CMakeLists.txt
+++ b/SingleSource/Regression/C/gcc-c-torture/execute/CMakeLists.txt
@@ -1,7 +1,7 @@
 add_subdirectory(ieee)
 
 # GCC C Torture Suite is conventionally run without warnings
-list(APPEND CFLAGS -Wno-implicit-int -Wno-int-conversion -Wno-implicit-function-declaration -w)
+list(APPEND CFLAGS -Wno-implicit-int -Wno-int-conversion -Wno-implicit-function-declaration)
 
 set(TestsToSkip)
 
@@ -12,6 +12,113 @@ set(TestsToSkip)
 # Tests with features unsupported by Clang (usually GCC extensions)
 # (Big list of naughty tests)
 file(GLOB UnsupportedTests CONFIGURE_DEPENDS
+  # JLC UNREACHABLE executed at
+  # libjlm/src/frontend/llvm/LlvmInstructionConversion.cpp:45
+  # Github issue #216
+  20001009-2.c
+  20030222-1.c
+  20050203-1.c
+  20061031-1.c
+  20071211-1.c
+  20080122-1.c
+  960312-1.c
+  990130-1.c
+  990413-2.c
+  pr38533.c
+  pr40022.c
+  pr40657.c
+  pr41239.c
+  pr43385.c
+  pr43560.c
+  pr44852.c
+  pr45695.c
+  pr46309.c
+  pr47925.c
+  pr47925.c
+  pr49218.c
+  pr49279.c
+  pr49390.c
+  pr51581-1.c
+  pr51581-1.c
+  pr51581-2.c
+  pr51877.c
+  pr51933.c
+  pr52286.c
+  pr53645-2.c
+  pr53645.c
+  pr56205.c
+  pr56866.c
+  pr56982.c
+  pr57344-1.c
+  pr57344-2.c
+  pr57344-3.c
+  pr57344-4.c
+  pr58277-1.c
+  pr58419.c
+  pr63641.c
+  pr65053-1.c
+  pr65053-2.c
+  pr65648.c
+  pr65956.c
+  pr68328.c
+  pr69320-2.c
+  pr69691.c
+  pr70460.c
+  pr70903.c
+  pr78438.c
+  pr78726.c
+  pr79354.c
+  pr79737-2.c
+  pr80421.c
+  pr81588.c
+  pr82954.c
+  pr84478.c
+  pr84524.c
+  pr85156.c
+  pr85756.c
+  pr88904.c
+  stkalign.c
+  # JLC blockaddress constants are not supported
+  # Github issue #217
+  20040302-1.c
+  20041214-1.c
+  20071220-1.c
+  20071220-2.c
+  20071210-1.c
+  920302-1.c
+  920501-3.c
+  920501-4.c
+  920501-5.c
+  comp-goto-1.c
+  # JLC invalid type
+  # Github issue #218
+  20050316-1.c
+  20050316-2.c
+  20050316-3.c
+  20050607-1.c
+  simd-4.c
+  # JLC segmentation fault
+  # Github issue #219
+  20071120-1.c
+  # JLC GlobalAlias constants are not supported
+  # Github issue #220
+  alias-2.c
+  alias-3.c
+  alias-4.c
+  # JLC produced executable never finish run
+  20021024-1.c
+  20140212-1.c
+  pr68506.c
+  # JLC error: child terminated by signal 11
+  built-in-setjmp.c
+  pr84521.c
+  # JLC error: child terminated by signal 8
+  pr85582-1.c
+  # JLC error: child terminated by signal 6
+  stdarg-3.c
+  struct-ret-1.c
+  va-arg-22.c
+
   # GCC Extension: Nested functions
   20000822-1.c
   20010209-1.c
diff --git a/SingleSource/Regression/C/gcc-c-torture/execute/ieee/CMakeLists.txt b/SingleSource/Regression/C/gcc-c-torture/execute/ieee/CMakeLists.txt
index e4ba9009..19c88b64 100644
--- a/SingleSource/Regression/C/gcc-c-torture/execute/ieee/CMakeLists.txt
+++ b/SingleSource/Regression/C/gcc-c-torture/execute/ieee/CMakeLists.txt
@@ -1,5 +1,5 @@
 # GCC C Torture Suite is conventionally run without warnings
-list(APPEND CFLAGS -Wno-implicit-int -Wno-implicit-function-declaration -w)
+list(APPEND CFLAGS -Wno-implicit-int -Wno-implicit-function-declaration)
 set(TestsToSkip)
 
 ##
@@ -11,6 +11,10 @@ set(TestsToSkip)
 file(GLOB UnsupportedTests
   CONFIGURE_DEPENDS
 
+  # JLC UNREACHABLE executed at
+  # libjlm/src/frontend/llvm/LlvmInstructionConversion.cpp:45
+  pr50310.c
+
   # The following all expect very specific optimiser behavior from the compiler
 
   # Clang at O0 does not work out the code referencing the undefined symbol can
diff --git a/SingleSource/Regression/CMakeLists.txt b/SingleSource/Regression/CMakeLists.txt
index e060724b..b4714afd 100644
--- a/SingleSource/Regression/CMakeLists.txt
+++ b/SingleSource/Regression/CMakeLists.txt
@@ -1,2 +1,2 @@
 add_subdirectory(C)
-add_subdirectory(C++)
+#add_subdirectory(C++)
diff --git a/SingleSource/UnitTests/CMakeLists.txt b/SingleSource/UnitTests/CMakeLists.txt
index e70fcbd3..f383834b 100644
--- a/SingleSource/UnitTests/CMakeLists.txt
+++ b/SingleSource/UnitTests/CMakeLists.txt
@@ -1,13 +1,17 @@
 include(CheckCCompilerFlag)
 
-add_subdirectory(C++11)
-add_subdirectory(Float)
+#add_subdirectory(C++11)
+#add_subdirectory(Float)
 add_subdirectory(Matrix)
 add_subdirectory(SignlessTypes)
-add_subdirectory(Threads)
-add_subdirectory(Vector)
-add_subdirectory(Vectorizer)
-add_subdirectory(X86)
+# JLC fails tls.test
+#add_subdirectory(Threads)
+# JLC produce: error: invalid cast opcode for cast from '<4 x i32>' to '<4 x i8>'
+#add_subdirectory(Vector)
+# JLC produce: invoke is not supported.
+# UNREACHABLE executed at libjlm/src/frontend/llvm/LlvmInstructionConversion.cpp:1036
+#add_subdirectory(Vectorizer)
+#add_subdirectory(X86)
 
 list(APPEND CFLAGS -Wno-implicit-function-declaration -Wno-implicit-int)
 
@@ -18,7 +22,16 @@ if(TARGET_OS STREQUAL "Darwin")
   add_subdirectory(ObjC++)
 endif()
 
-file(GLOB Source RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.c *.cpp)
+
+#file(GLOB Source RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.c *.cpp)
+file(GLOB Source RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.c)
+
+# JLC unsupported test
+list(REMOVE_ITEM Source AtomicOps.c)
+# JLC produces incorrect result
+list(REMOVE_ITEM Source 2003-05-07-VarArgs.c)
+list(REMOVE_ITEM Source 2003-08-11-VaListArg.c)
+
 if(TARGET_OS STREQUAL "AIX" AND ARCH STREQUAL "PowerPC")
   list(REMOVE_ITEM Source 2007-04-25-weak.c)
   if (NOT PPC_IS_PPC64_ENABLED)
@@ -56,16 +69,4 @@ if(NOT ARCH STREQUAL "x86")
   )
 endif()
 
-# Enable matrix types extension tests for compilers supporting -fenable-matrix.
-check_c_compiler_flag(-fenable-matrix COMPILER_HAS_MATRIX_FLAG)
-if (COMPILER_HAS_MATRIX_FLAG)
-  set_property(SOURCE matrix-types-spec.cpp PROPERTY COMPILE_FLAGS -fenable-matrix)
-else()
-  list(REMOVE_ITEM Source matrix-types-spec.cpp)
-endif()
-
 llvm_singlesource()
-
-if (COMPILER_HAS_MATRIX_FLAG)
-  set_property(TARGET matrix-types-spec PROPERTY LINK_OPTIONS -fenable-matrix)
-endif()
